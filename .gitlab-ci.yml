stages:
  - build
  - test
  - deploy
 

default:
  image: alpine
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY


variables:
  IMAGE_PATH: reg.cicd.tlow.ir/fbgerami/monorepo
  VERSION: v1.0.6

vote-build-job:
  stage: build
  image: docker:dind
  script:
    - cat /root/.docker/config.json 
    - cd vote
    - docker build -t ${IMAGE_PATH}/vote:$CI_COMMIT_SHORT_SHA .
    - docker push ${IMAGE_PATH}/vote:$CI_COMMIT_SHORT_SHA
 


result-build-job:
  stage: build
  image: docker:dind
  script:
    - cd result
    - docker build -t ${IMAGE_PATH}/result:$CI_COMMIT_SHORT_SHA .
    - docker push ${IMAGE_PATH}/result:$CI_COMMIT_SHORT_SHA

worker-build-job:
  stage: build
  image: docker:dind
  script:
    - cd worker
    - docker build -t ${IMAGE_PATH}/worker:$CI_COMMIT_SHORT_SHA .
    - docker push ${IMAGE_PATH}/worker:$CI_COMMIT_SHORT_SHA


# worker-test-image:
#   stage: test
#   needs: ["worker-build-job"]
#   script:
#     - docker pull ${IMAGE_PATH}/worker:$CI_COMMIT_SHORT_SHA
#     - echo "worker image test"
#     - docker tag ${IMAGE_PATH}/worker:$CI_COMMIT_SHORT_SHA ${IMAGE_PATH}/worker:${VERSION}
#     - docker push ${IMAGE_PATH}/worker:${VERSION}


# result-test-image:
#   stage: test
#   needs: ["result-build-job"]
#   script:
#     - docker pull ${IMAGE_PATH}/result:$CI_COMMIT_SHORT_SHA
#     - echo "result image test"
#     - docker tag ${IMAGE_PATH}/result:$CI_COMMIT_SHORT_SHA ${IMAGE_PATH}/result:${VERSION}
#     - docker push ${IMAGE_PATH}/result:${VERSION}

# vote-test-image:
#   stage: test
#   needs: ["vote-build-job"]
#   script:
#     - docker pull ${IMAGE_PATH}/vote:$CI_COMMIT_SHORT_SHA
#     - echo "vote image test"
#     - docker tag ${IMAGE_PATH}/vote:$CI_COMMIT_SHORT_SHA ${IMAGE_PATH}/vote:${VERSION}
#     - docker push ${IMAGE_PATH}/vote:${VERSION}


# # voting-app-scan-image:
# #   stage: test
# #   image: aquasec/trivy
# #   needs: ["vote-test-image","result-test-image","worker-test-image"]
# #   variables:
# #     VOTE_IMAGE: ${IMAGE_PATH}/vote:${VERSION}
# #     RESULT_IMAGE: ${IMAGE_PATH}/result:${VERSION}
# #     WORKER_IMAGE: ${IMAGE_PATH}/worker:${VERSION}
# #   script:
# #     - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/tmp/trivy-gitlab.tpl" -o gl-container-scanning-report.json $VOTE_IMAGE
# #     - trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $VOTE_IMAGE
# #     - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/tmp/trivy-gitlab.tpl" -o gl-container-scanning-report.json $RESULT_IMAGE
# #     - trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $RESULT_IMAGE
# #     - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/tmp/trivy-gitlab.tpl" -o gl-container-scanning-report.json $WORKER_IMAGE
# #     - trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress $WORKER_IMAGE
# #   cache:
# #     paths:
# #       - /cache/.trivycache/
# #   artifacts:
# #     reports:
# #       container_scanning: gl-container-scanning-report.json
# #


# deploy-to-pre-product:
#   stage: deploy
#   variables:
#     DOMAIN: pre-product.tlow.ir
#     SERVER_NAME: pre-product.tlow.ir
#     HOSTNAME: pre-product
#     SSH_PORT: 8431
#     SSH_USER: root
#     SERVICE_PATH: /opt/services/vote-services
#   before_script:
#     - eval $(ssh-agent -s)
#     - chmod 400 ${SSH_PRIVATE_KEY}
#     - ssh-add ${SSH_PRIVATE_KEY}
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#   script:
#     - |
#       # Create directory if not exist
#       ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
#       echo "$CI_REGISTRY_USER aaa $CI_JOB_TOKEN aaa $CI_REGISTRY"
#       [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH}
#       # zaheran MY_PUBLIC_KEY inja kar nemikone
#       # cat $MY_PUBLIC_KEY >> ~/.ssh/authorized_keys

#       "
#       # change env file
#       sed -i "s/FQDN/${DOMAIN}/g" .env
#       sed -i "s/SERVER_NAME/${HOSTNAME}/g" .env
#       sed -i "s/PIPELINE_ID/${VERSION}/g" .env
#       # move compose and env file to server
#       scp -o StrictHostKeyChecking=no -P${SSH_PORT} .env ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
#       scp -o StrictHostKeyChecking=no -P${SSH_PORT} compose.yml ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
#       # deploy service on server
#       ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
#       docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#       cd ${SERVICE_PATH}
#       docker compose pull
#       docker compose up -d
#       "
#   environment:
#     name: pre-product
#     url: https://vote.$DOMAIN

# deploy-to-production:
#   stage: deploy
#   variables:
#     DOMAIN: production.tlow.ir
#     SERVER_NAME: production.tlow.ir
#     HOSTNAME: production
#     SSH_PORT: 8431
#     SSH_USER: root
#     SERVICE_PATH: /opt/services/vote-services
#   before_script:
#     - eval $(ssh-agent -s)
#     - chmod 400 "$SSH_PRIVATE_KEY"
#     - ssh-add "$SSH_PRIVATE_KEY"
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#   script:
#     - |
#       # Create directory if not exist
#       ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
#       echo "a"
#       [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH}
#       "
#       # change env file
#       sed -i "s/FQDN/${DOMAIN}/g" .env
#       sed -i "s/SERVER_NAME/${HOSTNAME}/g" .env
#       sed -i "s/PIPELINE_ID/${VERSION}/g" .env
#       # move compose and env file to server
#       scp -o StrictHostKeyChecking=no -P${SSH_PORT} .env ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
#       scp -o StrictHostKeyChecking=no -P${SSH_PORT} compose.yml ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
#       # deploy service on server
#       ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
#       docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#       cd ${SERVICE_PATH}
#       docker compose pull
#       docker compose up -d
#       "
#   environment:
#     name: production
#     url: https://vote.$DOMAIN
#   when: manual